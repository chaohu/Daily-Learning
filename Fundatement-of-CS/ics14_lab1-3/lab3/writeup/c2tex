#!/usr/bin/perl 
use Getopt::Std;

#################################################################
# c2tex - filter that formats C code for Latex
#
# Dave O'Hallaron, Carnegie Mellon, 2002
#
# Usage: c2tex [-nh] [-s <startline> -f <file> -t <tag>
#
# Options:
#   -n           add line numbers (default none).
#   -c           generate colored line nums (linenumcolor)
#   -h           add hrule with file name (default none).
#   -s           starting line number (default 1)
#   -f <file>    input file (required)
#   -t <tag>     tag that delimits the text to be extracted (required)
#
# Scans <infile> and echos each text line contained between pairs of 
# directives of the form:
#   /* $begin <tag> */
#   ...echos everything here except other directives
#   /* $end <tag> */ 
# 
# Output is written to file ./<tag>.tex
#
# Different tags can be nested arbitrarily, and blocks with the
# same tag can appear multiple times.
#
# Other features:
#   - Places echoed lines in an alltt environment with right and left
#     braces and backslashed strings such as "\n"  properly escaped. 
#   - Elides any nested directives
#   - Checks for mismatched or missing tags at the end.
#################################################################

# parse the command line arguments
getopts('cnhs:f:t:');
if (!$opt_f || !$opt_t) {
    printf STDERR "Usage: $0 [-nh] [-s <startline>] -f <filename> -t <tag>\n";
    printf STDERR "Options:\n";
    printf STDERR "  -n           add line numbers (default none).\n";
    printf STDERR "  -c           generate colored line nums (linenumcolor).\n";
    printf STDERR "  -h           add hrule with file name (default none).\n";
    printf STDERR "  -s <linenum> starting line number (default 1).\n";
    printf STDERR "  -f <file>    input file (required).\n";
    printf STDERR "  -t <tag>     tag that delimits extracted text (required).\n";
    die "\n";
}

# take care of the command line arguments
$infile = $opt_f;
$tag = $opt_t;
$texfile = $tag.".tex";

if (!$opt_s) {
    $linenum = 1;       # the first line number is unity by default
} else {
    $linenum = $opt_s;  # otherwise use the line number passed in by the user.
}

# make sure the input file is readable
open(INFILE, $infile) || die "$0: ERROR: couldn't open ", $infile, "\n";
close(INFILE);

# detabify the input file
$tmpfilename = "/tmp/"."c2tex".$$;
system("expand < $infile > $tmpfilename");

# open the detabified temporary file
open(INFILE, $tmpfilename) || die "$0: ERROR: couldn't open $tmpfilename\n";

# open the output tex file
open(OUTFILE, ">$texfile") || die "$0: ERROR: couldn't open $texfile\n";

# initialize various state variables.
$echoline = 0; # initially, don't echo anything
$found = 0;    # becomes true when we find the tag
$toggle = 0;   # toggled each time we find the tag
$clinenum = 0; # current input line number

# Convert any _ in filename to \_ to keep latex happy
$latexfilename = $infile;
$latexfilename =~ s/_/\\_/g;  

# Strip off any preceeding "../"
$latexfilename =~ s/^\.\.\///;

# If -h on command line, begin code with a horizontal line with the 
# source filename right justified
if ($opt_h) {
    print OUTFILE "\\hrulefill {\\em \\, $latexfilename}\n";
}

# main loop - extract and format
print OUTFILE "\\begin{alltt}\n";
while (<INFILE>) {
    $clinenum++;
    $line = $_;

    # matches a $begin directive
    if ($line =~ /\/\* \$begin $tag \*\// ) { 
	if ($toggle) {
	    system("rm -f $tmpfilename"); 
	    die "$0: ERROR (line $clinenum): Bad nesting. Found \$begin, expected \$end.\n";
	}
	$echoline = 1;
	$found = 1;
	$toggle = ($toggle + 1) % 2;
    }

    # matches a $end directive
    elsif ($line =~ /\/\* \$end $tag \*\//) { 
	if (!$toggle) {
	    system("rm -f $tmpfilename"); 
	    die "$0: ERROR (line $clinenum): Bad nesting. Found \$end, expected \$begin.\n";
	}
	$echoline = 0;
	$toggle = ($toggle + 1) % 2;
    }

    # elides nested nonmatching tags
    elsif (($line =~ /\/\* \$begin/) ||
	   ($line =~ /\/\* \$end/)) {
    } 

    # echos a line
    elsif ($echoline) {                
	$line =~ s/{/\\verb:\{:/g;     # { becomes \{
	$line =~ s/}/\\verb:\}:/g;     # } becomes \}
	$line =~ s/\\r/\\verb:\\r:/g;  # \r becomes \verb:\r:
	$line =~ s/\\n/\\verb:\\n:/g;  # \n becomes \verb:\n:
	$line =~ s/\\t/\\verb:\\t:/g;  # \t becomes \verb:\t:
	$line =~ s/\\0/\\verb:\\0:/g;  # \0 becomes \verb:\0:

	# if -n on command line, emit a line number.
	if ($opt_n) {
	    if ($opt_c) { # if -c emit a colored line number
		printf OUTFILE 
		    "{\\scriptsize \\textcolor{linenumcolor}{%3d}} ", 
		    $linenum++;		
	    }
	    else {
		printf OUTFILE "{\\scriptsize %3d} ", $linenum++;
	    }
	}
	printf OUTFILE "%s", $line;

    }
}
print OUTFILE "\\end{alltt}\n";

# If -h on command line, end the code with a matching horizontal line
if ($opt_h) {
    print OUTFILE "\\hrulefill {\\em \\, $latexfilename}\n";
}


# clean up and do some error checking 
system("rm -f $tmpfilename"); 
if (!$found) {
    die "$0: ERROR: Couldn't find tag $tag in $infile\n";
}
if ($toggle) {
    die "$0: ERROR: Nonmatching begin/end directives in $infile\n"; 
}

exit;
