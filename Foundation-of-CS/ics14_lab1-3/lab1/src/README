#####################################################################
# CS:APP Data Lab Source files
#
# Copyright (c) 2006-2011, R. Bryant and D. O'Hallaron.
######################################################################

************
0. Overview
************

The basic test harness is a program, called "btest", that checks each
puzzle in bits.c for correctness and assigns a score.  The test
harness is built from the following source files:

	*bits.{c,h}	- Programming puzzles
	*decl.c		- Characterization of each puzzle for testing
	*tests.c	- Straightforward C solution for each puzzle
	btest.{c,h}	- Main testing routine

A set of "standard puzzles" is defined by template files in the
./puzzles/ subdirectory.  You select a subset of the standard puzzles
by including their corresponding templates in selections.c.  (File
selections-all.c contains the names of all puzzle files.)  The files
marked with a "*" are generated automatically by the Makefile,
according to the specification in selections.c.

********
1. Files
********

Static test harness files
  btest.{c,h}                 
  bits-header.c		
  decl-footer.c
  decl-header.c
  tests-header.c

Autogenerated test harness files
  bits.c		Solution file (same as bits.c-solution)
  decl.c		Characterizes each selected puzzle
  tests.c		Reference C code for each selected puzzle

Driver program and its helpers
  driver.pl*		Autograding driver program
  Driverlib.pm		Helper functions for drivers to connect to result server
  Driverhdrs.pm		Header file for Driverlib.pm
  genhdrs.pl		Generates the Driverhdrs.pm file from ../Datalab.pm

Other files
  bddcheck/		Experimental BDD checker
  dlcdir/		Data Lab Compiler (dlc) sources
  dlc*			dlc binary
  Makefile		Makefile for everything is this directory
  Makefile-handout	The Makefile that is handed out to students
  puzzles/		The complete set of puzzles
  README		This file
  README-handout	The README file that is handed out to students
  selections-all.c	The list of all puzzles	
  selections.c		Puzzle selections for current lab instance
  selections-csapp.c    Puzzle selections for  CS:APP default lab instance 
  selections-*.c	Puzzle selections from past semesters at CMU

  fshow.c		Helper that shows the bit representations of 
			arbitrary floating point numbers
  ishow.c		Helper program that shows the bit representation
			of arbitrary integer numbers

****************************
1. Building the Test Harness
****************************

Select a set of puzzles by editing selections.c, and then rebuild the
test harness by typing:

    unix> make btest

This will also generate the solution in bits.c, and also make a copy
of the solution in bits.c-solution.


************************
3. Creating New Puzzles
************************

To add a new puzzle, you need to do two things:

(a) Create a new template file in ./puzzles.
(b) Add an entry to the legallist struct in ../dlcdir/legallist.c.
    so that dlc will recognize and check your new puzzle.

3.1 Creating new template files

The format for the template files in ./puzzles is fairly
straightforward. It consists of 4 contiguous sections with the
following form:

#ifdef PROTOTYPE

	<Prototypes of the function and its test function.
	 These are used to generate the file bits.h>

#endif
#ifdef DECL

	<A declaration of the function and some of its characteristics.
 	 These are used to generate the file decl.c.
	 The declaration consists of an entry to a struct of type
	 "test_rec" as defined in btest.h.  Here is an example for the
	 problem isZero:

 	{"isZero",             /* String name */ 		
	(funct_t) isZero,      /* Function */
	(funct_t) test_isZero, /* Test function */
	1,                     /* Number of function arguments */
	"! ~ & ^ | + << >>",   /* List of legal operators */
			       /* Special case: Set to "$" for f.p. puzzles */ 
	3,                     /* Max number of ops allowed in solution */
	1,                     /* Problem rating (1 -- 4 ) */
	{{TMin, TMax},         /* Argument ranges */
	{TMin,TMax},           /* Ranges are always defined for 3 args, */
	{TMin,TMax}}},         /* even if the function takes fewer */
                               /* Special case: 1st arg set to {1,1} for fp puzzles */

	 The fields are a string name, the function and its test
	 (cast to pointers of type funct_t), the number of arguments,
	 the set of allowed operators, the number of allowed operations,
	 the rating, and the ranges for the arguments.  

	 Ranges are given for 3 arguments even if the function takes
	 fewer.  The macros TMin and TMax are defined to give the
	 minimum and maximum representable values.

	 Note: An argument range of {1,1} for the first argument denotes a
	 special case for floating point functions where the input
	 argument is an unsigned bit-level representation of a float. 
	 In this case, btest performs a set of tests specifically designed
	 for the range of floating point numbers.

#endif
#ifdef CODE

	<The solution code used for the problem.  This code uses the 
         compile-time constant FIX to split the code between the version 
         the students get and the official solution.  This section is used 
         to generate the files bits.c and the solution file bits.c-solution>

#ifdef TEST

	<The code used to describe the intended functionality of the code
	 This is used to generate the file tests.c.  Students will see this
	 code, so be sure not to give away any interesting tricks in it.>

#endif


3.2 Updating the dlc compiler 

Each new puzzle that you add to the standard set in ./puzzles requires
a one-line entry in array "legallist" in the file ../dlcdir/legallist.c.
For example, the entry for function isZero is as follows:

  {{"isZero"}, 0, 3, {'~', '&', '!', '^', '|', '+', LS, RS, 0}},

This indicates that the function name is "isZero", that it may *not*
make calls to other functions, that the maximum number of operations is
3, and that it may only use the operators shown in the list, where 'LS' is
the name of the token for << and RS for >>. The list of operators
is terminated with a 0.

After modifing ../dlcdir/legallist.c, type

	unix> make

in the ../dlcdir directory to remake the dlc compiler. 

*******************
4. Helper Programs
*******************

The ishow and fshow programs are included to help you examine integer
and floating point representations respectively. They each take a
single decimal or hex number as an argument. To build them type:

Example usages:

linux> ./ishow 0x27
Hex = 0x00000027,	Signed = 39,	Unsigned = 39

linux> ./ishow 27
Hex = 0x0000001b,	Signed = 27,	Unsigned = 27

linux> ./fshow 0x15213243
Floating point value 3.255334057e-26
Bit Representation 0x15213243, sign = 0, exponent = 0x2a, fraction = 0x213243
Normalized.  +1.2593463659 X 2^(-85)

linux> ./fshow 15213243
Floating point value 2.131829405e-38
Bit Representation 0x00e822bb, sign = 0, exponent = 0x01, fraction = 0x6822bb
Normalized.  +1.8135598898 X 2^(-126)
