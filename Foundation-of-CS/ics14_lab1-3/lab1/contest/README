 ####################################################
# CS:APP Data Lab "Beat the Prof" Contest
# Directions to Instructors
#
# Copyright (c) 2011, R. Bryant and D. O'Hallaron
####################################################

This directory contains the files that you will need to run the CS:APP
Data Lab "Beat the Prof" Contest. 

************
1. Overview
************

In this contest, students compete against themselves and the
instructor. The goal is to solve each Data Lab puzzle using the fewest
number of operators. Students who match or beat the instructor's
operator count for each puzzle are winners.

The contest is completely self-contained. You can run it for your class
on any Linux box with an IP address. You don't need root password or
any special privileges.

Students (and the instructor) submit their entries by running the
driver with the -u option from a Linux box:

    linux> ./driver.pl -u "Your Nickname"

Nicknames are limited to 35 characters and can contain alphanumerics,
apostrophes, commas, periods, dashes, underscores, and ampersands.
The most recent entry from each user will appear on the real-time
scoreboard, which students can view by pointing their browsers at

    http://$SERVER_NAME:$REQUESTD_PORT

where $SERVER_NAME and $REQUESTD_PORT are defined by the instructor in
the Contest.pm file. Students can anonymize themselves as much as they
want by choosing their nickname. It's a lot of fun to see the inventive
nicknames that the students come up with.

********
2. Files
********

contest.pl*          # Main daemon that nannies the other servers and daemons
Contest.pm           # Contest configuration file
contest-reportd.pl*  # Report daemon that continuously updates scoreboard
contest-requestd.pl* # Request server that serves scoreboard to browsers
contest-resultd.pl   # Result server that gets autoresults from drivers
log-status.txt       # Status log with msgs from various servers and daemons
log.txt              # Log file of autoresults from drivers
Makefile             # Starts and stops the contest and cleans files
log.txt              # Log file of autoresults received from drivers   
README               # This file
scoreboard.html      # Real time Web scoreboard
update.pl*           # Helper to contest-reportd.pl that updates scoreboard

**********************
4. Running the Contest
**********************

Step 1: Configure the contest by editing Section 1 of Contest.pm. 

In Contest.pm, you'll define a small number of course-dependant
constants, such as the server domain name, the userid of the
instructor, and how frequently the scoreboard will be updated.

NOTE: The driver.pl program includes a small header file called
Driverhdrs.pm, which identifies the server and port to send results
to. It is autogenerated from the current Contest.pm file each time you
build the datalab (by typing "make" from the datalab directory).

Step 2: Start the contest by typing
        linux> make start

This starts the main contest daemon, which runs and nannies all of the
servers required to offer the contest. You can only run one contest at
a time on any particular server.

Step 3: Students and instructors submit entries and view the
scoreboad:
        To submit entries: ./driver.pl -u "Your Nickname"
        To view the scoreboard: http://$SERVER_NAME:$REQUESTD_PORT

Step 3: Stop the contest by typing 
        linux> make stop

If you need to change any parameters such as the scoreboard update
frequency, stop the contest ("make stop"), update Contest.pm, then
restart the contest ("make start").  You can stop and restart the
contest this way as often as you like without affecting the previous
results. 

To start the contest over from scratch, deleting all of the previous
submissions, type "make cleanallfiles".

****************
5. How it works: 
****************

1. When the driver (driver.pl) is invoked with the -u option, it sends
a text "autoresult" string over HTTP to a "result server"
(contest-resultd.pl) listening on $RESULTD_PORT, which simply appends
the string to a log file (log.txt).

2. Every $UPDATE_PERIOD seconds, the "report daemon"
(datalab-reportd.pl) scans log.txt and builds a new scoreboard
(scoreboard.html) based on the most recent entries from each user.

3. The "request server (contest-requestd) is a trivially simple web
server listening on port $REQUESTD_PORT that returns the scoreboard
each time it receives a connection request.

The instructor defines the parameters $REQUESTD_PORT, $RESULTD_PORT,
and $UPDATE_PERIOD in Section 1 of the Contest.pm file.

